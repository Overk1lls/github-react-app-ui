{"version":3,"file":"static/js/952.39834a75.chunk.js","mappings":"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","sources":["components/Navbar/Navbar.tsx","app/hooks.ts","components/RepositoryList/RepositoryList.tsx","hooks/useRepositories.ts","components/CommitsTable/CommitsTable.tsx","hooks/useCommits.ts","pages/Home/Home.tsx"],"sourcesContent":["import { useState } from 'react';\r\nimport { User } from '../../models/user';\r\nimport { signOut } from '../../app/auth';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useGetCurrentUserQuery } from '../../features/user/userAPI';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Box from '@mui/material/Box';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Menu from '@mui/material/Menu';\r\nimport Container from '@mui/material/Container';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport Link from '@mui/material/Link';\r\nimport GitHubIcon from '@mui/icons-material/GitHub';\r\nimport LogoutIcon from '@mui/icons-material/Logout';\r\nimport { START_PAGE } from '../AppRouter';\r\n\r\nexport const infoToDisplay: Array<keyof User> = ['email', 'name'];\r\n\r\nexport default function Navbar() {\r\n  const [anchorElUser, setAnchorElUser] = useState<null | HTMLElement>(null);\r\n  const { isLoading, data: user, isError, error } = useGetCurrentUserQuery();\r\n  const navigate = useNavigate();\r\n\r\n  const handleUserSignOut = () => {\r\n    signOut();\r\n    navigate(START_PAGE);\r\n  };\r\n\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Container maxWidth=\"xl\">\r\n        {isLoading && <h2>Loading...</h2>}\r\n        {isError && <h2>{JSON.stringify(error)}</h2>}\r\n        {user && (\r\n          <Toolbar disableGutters>\r\n            <GitHubIcon sx={{ display: { xs: 'none', md: 'flex' }, mr: 1 }} />\r\n\r\n            <Typography\r\n              variant=\"h6\"\r\n              noWrap\r\n              component=\"a\"\r\n              href=\"/\"\r\n              sx={{\r\n                mr: 2,\r\n                display: { xs: 'none', md: 'flex' },\r\n                fontFamily: 'monospace',\r\n                fontWeight: 700,\r\n                color: 'inherit',\r\n                textDecoration: 'none',\r\n              }}\r\n            >\r\n              Github React App\r\n            </Typography>\r\n\r\n            <Box sx={{ flexGrow: 1, display: { xs: 'none', md: 'flex' } }} />\r\n\r\n            {infoToDisplay.map((info, i) => (\r\n              <Box key={i} sx={{ flexGrow: 0, mr: 1 }}>\r\n                <Typography sx={{ display: 'block', mr: '0.7rem' }}>{user[info]}</Typography>\r\n              </Box>\r\n            ))}\r\n\r\n            <Box sx={{ flexGrow: 0 }}>\r\n              <Tooltip title=\"Open settings\">\r\n                <IconButton onClick={(e) => setAnchorElUser(e.currentTarget)} sx={{ p: 0 }}>\r\n                  <Avatar alt=\"current_user\" src={user.avatar_url} />\r\n                </IconButton>\r\n              </Tooltip>\r\n\r\n              <Menu\r\n                sx={{ mt: '45px' }}\r\n                id=\"menu-appbar\"\r\n                anchorEl={anchorElUser}\r\n                anchorOrigin={{\r\n                  vertical: 'top',\r\n                  horizontal: 'right',\r\n                }}\r\n                keepMounted\r\n                transformOrigin={{\r\n                  vertical: 'top',\r\n                  horizontal: 'right',\r\n                }}\r\n                open={Boolean(anchorElUser)}\r\n                onClose={() => setAnchorElUser(null)}\r\n              >\r\n                <MenuItem key={0}>\r\n                  <Typography textAlign=\"center\">\r\n                    <Link href={user.html_url} underline=\"none\" target=\"_blank\">\r\n                      Profile\r\n                    </Link>\r\n                  </Typography>\r\n                </MenuItem>\r\n\r\n                <MenuItem key={1} onClick={handleUserSignOut}>\r\n                  <Typography textAlign=\"center\">Logout</Typography>\r\n                </MenuItem>\r\n              </Menu>\r\n            </Box>\r\n\r\n            <Box sx={{ flexGrow: 0, ml: 1 }}>\r\n              <Tooltip title=\"Logout\">\r\n                <IconButton onClick={handleUserSignOut}>\r\n                  <LogoutIcon />\r\n                </IconButton>\r\n              </Tooltip>\r\n            </Box>\r\n          </Toolbar>\r\n        )}\r\n      </Container>\r\n    </AppBar>\r\n  );\r\n}\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport type { RootState, AppDispatch } from './store';\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import { FC } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\r\nimport { useRepositories } from '../../hooks/useRepositories';\r\nimport { addRepositoryName } from '../../features/repositories/repositorySlice';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport Select, { SelectChangeEvent } from '@mui/material/Select';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport Alert from '@mui/material/Alert';\r\n\r\ntype RepositoryListProps = {\r\n  org: string;\r\n};\r\n\r\nconst RepositoryList: FC<RepositoryListProps> = ({ org }) => {\r\n  const [data, isLoading, isError, error] = useRepositories(org);\r\n  const dispatch = useAppDispatch();\r\n  const repo = useAppSelector((state) => state.repoReducer.name);\r\n\r\n  const handleSelectChange = (e: SelectChangeEvent<string>) => {\r\n    dispatch(addRepositoryName(e.target.value));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <FormControl sx={{ m: 1, minWidth: 120 }} disabled={!!!data}>\r\n        <InputLabel id=\"select-repo-label\">Repositories</InputLabel>\r\n        <Select\r\n          label=\"Repositories\"\r\n          labelId=\"select-repo-label\"\r\n          value={repo}\r\n          onChange={handleSelectChange}\r\n        >\r\n          {data &&\r\n            data.map((repository) => (\r\n              <MenuItem key={repository.id} value={repository.name}>\r\n                {repository.name}\r\n              </MenuItem>\r\n            ))}\r\n        </Select>\r\n      </FormControl>\r\n\r\n      {isLoading && (\r\n        <Alert severity=\"info\" sx={{ p: '0.7rem' }}>\r\n          Loading...\r\n        </Alert>\r\n      )}\r\n\r\n      {isError && <Alert severity=\"error\">{JSON.stringify(error)}</Alert>}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RepositoryList;\r\n","import { SerializedError } from '@reduxjs/toolkit';\r\nimport { FetchBaseQueryError } from '@reduxjs/toolkit/dist/query';\r\nimport { useEffect } from 'react';\r\nimport { Optional } from '../app/types';\r\nimport { useLazyGetRepositoriesQuery } from '../features/repositories/repositoriesAPI';\r\nimport { Repository } from '../models/repository';\r\n\r\ntype HookReturnType = [\r\n  Optional<Repository[]>,\r\n  boolean,\r\n  boolean,\r\n  Optional<FetchBaseQueryError | SerializedError>\r\n];\r\n\r\nexport function useRepositories(org: string): HookReturnType {\r\n  const [trigger, state] = useLazyGetRepositoriesQuery({\r\n    refetchOnReconnect: true,\r\n  });\r\n  const { data, isLoading, isError, error } = state;\r\n\r\n  useEffect(() => {\r\n    const searchForRepos = setTimeout(async () => {\r\n      if (org.length > 1) {\r\n        await trigger(org, true);\r\n      }\r\n    }, 1500);\r\n\r\n    return () => {\r\n      clearTimeout(searchForRepos);\r\n    };\r\n  }, [org, trigger]);\r\n\r\n  return [data, isLoading, isError, error];\r\n}\r\n","import { FC, useState } from 'react';\r\nimport { DataGrid, GridCellParams, GridColumns } from '@mui/x-data-grid';\r\nimport { Commit } from '../../models/commit';\r\nimport { useAppSelector } from '../../app/hooks';\r\nimport { useCommits } from '../../hooks/useCommits';\r\nimport { Optional } from '../../app/types';\r\nimport Box from '@mui/material/Box';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Container from '@mui/material/Container';\r\n\r\nconst DEFAULT_ROWS_PER_PAGE = 10;\r\n\r\ninterface CommitRow {\r\n  id: string;\r\n  author: string;\r\n  committer: string;\r\n  message: string;\r\n  date: string;\r\n}\r\n\r\nconst commitsTableColumns: GridColumns<CommitRow> = [\r\n  { field: 'author', headerName: 'Author', width: 150 },\r\n  { field: 'committer', headerName: 'Committer', width: 150 },\r\n  { field: 'message', headerName: 'Message', width: 650 },\r\n  { field: 'date', headerName: 'Date', width: 175 },\r\n];\r\n\r\ntype CommitsTableProps = {\r\n  org: string;\r\n};\r\n\r\nconst CommitsTable: FC<CommitsTableProps> = ({ org }) => {\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(DEFAULT_ROWS_PER_PAGE);\r\n\r\n  const repo = useAppSelector((state) => state.repoReducer.name);\r\n  const [commits, isLoading, isError, , isUninitialized] = useCommits(org, repo);\r\n\r\n  const handleChangeRowsPerPage = (newPage: number) => {\r\n    setRowsPerPage(newPage);\r\n    setPage(0);\r\n  };\r\n\r\n  const handleRowClick = (params: GridCellParams) => {\r\n    if (commits?.length) {\r\n      const commit = commits.find((commit) => commit.commit.message === params.row.message);\r\n      window.open(commit?.html_url, '_blank');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"xl\">\r\n      {!isUninitialized && (\r\n        <Box sx={{ height: 400, width: '100%' }}>\r\n          <Toolbar\r\n            sx={{\r\n              pl: { sm: 2 },\r\n              pr: { xs: 1, sm: 1 },\r\n            }}\r\n          >\r\n            <Typography\r\n              sx={{\r\n                flex: '1 1 100%',\r\n                alignItems: 'center',\r\n                alignContent: 'center',\r\n                justifyContent: 'center',\r\n                justifyItems: 'center',\r\n              }}\r\n              variant=\"h6\"\r\n              id=\"tableTitle\"\r\n              component=\"div\"\r\n            >\r\n              Commits List\r\n            </Typography>\r\n          </Toolbar>\r\n          <DataGrid\r\n            disableSelectionOnClick\r\n            page={page}\r\n            pageSize={rowsPerPage}\r\n            rowsPerPageOptions={[5, 10, 15]}\r\n            onPageChange={(newPage) => setPage(newPage)}\r\n            onPageSizeChange={handleChangeRowsPerPage}\r\n            density=\"compact\"\r\n            rows={mapCommits(commits)}\r\n            columns={commitsTableColumns}\r\n            loading={isLoading}\r\n            error={isError === true || undefined}\r\n            onCellClick={handleRowClick}\r\n            sx={{\r\n              '& .MuiDataGrid-cell:hover': {\r\n                color: 'primary.main',\r\n                textDecoration: 'underline',\r\n                cursor: 'pointer',\r\n              },\r\n            }}\r\n          />\r\n        </Box>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport function mapCommits(commits: Optional<Commit[]>) {\r\n  return commits\r\n    ? commits.map((commit) => ({\r\n        id: commit.sha,\r\n        author: commit.commit.author.name,\r\n        committer: commit.commit.committer.name,\r\n        message: commit.commit.message,\r\n        date: commit.commit.committer.date,\r\n      }))\r\n    : [];\r\n}\r\n\r\nexport default CommitsTable;\r\n","import { SerializedError } from '@reduxjs/toolkit';\r\nimport { FetchBaseQueryError } from '@reduxjs/toolkit/dist/query';\r\nimport { useEffect } from 'react';\r\nimport { Optional } from '../app/types';\r\nimport { useLazyGetRepositoryCommitsQuery } from '../features/commits/commitsAPI';\r\nimport { Commit } from '../models/commit';\r\n\r\ntype CommitsHookReturnType = [\r\n  Optional<Commit[]>,\r\n  boolean,\r\n  boolean,\r\n  Optional<FetchBaseQueryError | SerializedError>,\r\n  boolean\r\n];\r\n\r\nexport function useCommits(owner: string, repo: string): CommitsHookReturnType {\r\n  const [trigger, state] = useLazyGetRepositoryCommitsQuery({\r\n    refetchOnReconnect: true,\r\n  });\r\n  const { data, isFetching, isError, error, isUninitialized } = state;\r\n\r\n  useEffect(() => {\r\n    const searchForRepos = setTimeout(async () => {\r\n      if (owner && repo) {\r\n        await trigger({ owner, repo }, true);\r\n      }\r\n    }, 500);\r\n\r\n    return () => {\r\n      clearTimeout(searchForRepos);\r\n    };\r\n  }, [owner, repo, trigger]);\r\n\r\n  return [data, isFetching, isError, error, isUninitialized];\r\n}\r\n","import { useState } from 'react';\r\nimport { Navigate } from 'react-router-dom';\r\nimport { isSignedIn } from '../../app/auth';\r\nimport { START_PAGE } from '../../components/AppRouter';\r\nimport Box from '@mui/material/Box';\r\nimport Navbar from '../../components/Navbar/Navbar';\r\nimport RepositoryList from '../../components/RepositoryList/RepositoryList';\r\nimport CommitsTable from '../../components/CommitsTable/CommitsTable';\r\nimport Container from '@mui/material/Container';\r\nimport TextField from '@mui/material/TextField';\r\n\r\nexport default function HomePage() {\r\n  const [org, setOrg] = useState('');\r\n\r\n  if (!isSignedIn()) {\r\n    return <Navigate to={START_PAGE} />;\r\n  }\r\n\r\n  const handleOrgInput = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setOrg(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Navbar />\r\n\r\n      <Box\r\n        component=\"form\"\r\n        sx={{\r\n          '& > :not(style)': { m: 1, width: '25ch' },\r\n          m: '2rem',\r\n          display: 'flex',\r\n          flexDirection: 'row',\r\n          alignItems: 'center',\r\n          justifyContent: 'center',\r\n        }}\r\n      >\r\n        <TextField\r\n          id=\"outlined-basic\"\r\n          label=\"Organization\"\r\n          variant=\"outlined\"\r\n          color=\"primary\"\r\n          sx={{ my: 2 }}\r\n          value={org}\r\n          onChange={handleOrgInput}\r\n        />\r\n        <RepositoryList org={org} />\r\n      </Box>\r\n\r\n      <CommitsTable org={org} />\r\n    </Container>\r\n  );\r\n}\r\n"],"names":["infoToDisplay","Navbar","useState","anchorElUser","setAnchorElUser","useGetCurrentUserQuery","isLoading","user","data","isError","error","navigate","useNavigate","handleUserSignOut","signOut","START_PAGE","AppBar","position","Container","maxWidth","JSON","stringify","Toolbar","disableGutters","GitHub","sx","display","xs","md","mr","Typography","variant","noWrap","component","href","fontFamily","fontWeight","color","textDecoration","Box","flexGrow","map","info","i","Tooltip","title","IconButton","onClick","e","currentTarget","p","Avatar","alt","src","avatar_url","Menu","mt","id","anchorEl","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","open","Boolean","onClose","MenuItem","textAlign","Link","html_url","underline","target","ml","Logout","useAppSelector","useSelector","org","useLazyGetRepositoriesQuery","refetchOnReconnect","trigger","state","useEffect","searchForRepos","setTimeout","length","clearTimeout","useRepositories","dispatch","useDispatch","repo","repoReducer","name","FormControl","m","minWidth","disabled","InputLabel","Select","label","labelId","value","onChange","addRepositoryName","repository","Alert","severity","commitsTableColumns","field","headerName","width","mapCommits","commits","commit","sha","author","committer","message","date","page","setPage","rowsPerPage","setRowsPerPage","owner","useLazyGetRepositoryCommitsQuery","isFetching","isUninitialized","useCommits","height","pl","sm","pr","flex","alignItems","alignContent","justifyContent","justifyItems","DataGrid","disableSelectionOnClick","pageSize","rowsPerPageOptions","onPageChange","newPage","onPageSizeChange","density","rows","columns","loading","undefined","onCellClick","params","find","row","window","cursor","HomePage","setOrg","isSignedIn","to","flexDirection","TextField","my"],"sourceRoot":""}